// This file was generated by gir (https://github.com/gtk-rs/gir @ 9ae0a4a+)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use RTSPResult;
use RTSPUrl;
use ffi;
use glib;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use gst;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct RTSPExtension(Object<ffi::GstRTSPExtension, ffi::GstRTSPExtensionInterface>);

    match fn {
        get_type => || ffi::gst_rtsp_extension_get_type(),
    }
}

unsafe impl Send for RTSPExtension {}
unsafe impl Sync for RTSPExtension {}

pub trait RTSPExtensionExt {
    //fn after_send(&self, req: /*Ignored*/&mut RTSPMessage, resp: /*Ignored*/&mut RTSPMessage) -> RTSPResult;

    //fn before_send(&self, req: /*Ignored*/&mut RTSPMessage) -> RTSPResult;

    fn configure_stream(&self, caps: &gst::Caps) -> Result<(), glib::error::BoolError>;

    //fn detect_server(&self, resp: /*Ignored*/&mut RTSPMessage) -> bool;

    //fn parse_sdp(&self, sdp: /*Ignored*/&mut gst_sdp::SDPMessage, s: &mut gst::Structure) -> RTSPResult;

    //fn receive_request(&self, req: /*Ignored*/&mut RTSPMessage) -> RTSPResult;

    //fn send(&self, req: /*Ignored*/&mut RTSPMessage, resp: /*Ignored*/&mut RTSPMessage) -> RTSPResult;

    //fn setup_media(&self, media: /*Ignored*/&mut gst_sdp::SDPMedia) -> RTSPResult;

    fn stream_select(&self, url: &mut RTSPUrl) -> RTSPResult;

    //fn connect_send<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<RTSPExtension>> RTSPExtensionExt for O {
    //fn after_send(&self, req: /*Ignored*/&mut RTSPMessage, resp: /*Ignored*/&mut RTSPMessage) -> RTSPResult {
    //    unsafe { TODO: call ffi::gst_rtsp_extension_after_send() }
    //}

    //fn before_send(&self, req: /*Ignored*/&mut RTSPMessage) -> RTSPResult {
    //    unsafe { TODO: call ffi::gst_rtsp_extension_before_send() }
    //}

    fn configure_stream(&self, caps: &gst::Caps) -> Result<(), glib::error::BoolError> {
        unsafe {
            glib::error::BoolError::from_glib(ffi::gst_rtsp_extension_configure_stream(self.to_glib_none().0, caps.to_glib_none().0), "Failed to configure stream")
        }
    }

    //fn detect_server(&self, resp: /*Ignored*/&mut RTSPMessage) -> bool {
    //    unsafe { TODO: call ffi::gst_rtsp_extension_detect_server() }
    //}

    //fn parse_sdp(&self, sdp: /*Ignored*/&mut gst_sdp::SDPMessage, s: &mut gst::Structure) -> RTSPResult {
    //    unsafe { TODO: call ffi::gst_rtsp_extension_parse_sdp() }
    //}

    //fn receive_request(&self, req: /*Ignored*/&mut RTSPMessage) -> RTSPResult {
    //    unsafe { TODO: call ffi::gst_rtsp_extension_receive_request() }
    //}

    //fn send(&self, req: /*Ignored*/&mut RTSPMessage, resp: /*Ignored*/&mut RTSPMessage) -> RTSPResult {
    //    unsafe { TODO: call ffi::gst_rtsp_extension_send() }
    //}

    //fn setup_media(&self, media: /*Ignored*/&mut gst_sdp::SDPMedia) -> RTSPResult {
    //    unsafe { TODO: call ffi::gst_rtsp_extension_setup_media() }
    //}

    fn stream_select(&self, url: &mut RTSPUrl) -> RTSPResult {
        unsafe {
            from_glib(ffi::gst_rtsp_extension_stream_select(self.to_glib_none().0, url.to_glib_none_mut().0))
        }
    }

    //fn connect_send<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Unimplemented object: *.Pointer
    //    Unimplemented p0: *.Pointer
    //}
}
