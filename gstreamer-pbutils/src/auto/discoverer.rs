// This file was generated by gir (d933f9a+) from gir-files (???)
// DO NOT EDIT

use DiscovererInfo;
use Error;
use ffi;
use glib;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use gst;
use gst_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Discoverer(Object<ffi::GstDiscoverer, ffi::GstDiscovererClass>);

    match fn {
        get_type => || ffi::gst_discoverer_get_type(),
    }
}

impl Discoverer {
    pub fn new(timeout: gst::ClockTime) -> Result<Discoverer, Error> {
        assert_initialized_main_thread!();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::gst_discoverer_new(timeout.to_glib(), &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }
}

unsafe impl Send for Discoverer {}
unsafe impl Sync for Discoverer {}

pub trait DiscovererExt {
    fn discover_uri(&self, uri: &str) -> Result<DiscovererInfo, Error>;

    fn discover_uri_async(&self, uri: &str) -> bool;

    fn start(&self);

    fn stop(&self);

    fn get_property_timeout(&self) -> u64;

    fn set_property_timeout(&self, timeout: u64);

    fn connect_discovered<F: Fn(&Self, &DiscovererInfo, &Error) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_finished<F: Fn(&Self) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_source_setup<F: Fn(&Self, &gst::Element) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_starting<F: Fn(&Self) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_timeout_notify<F: Fn(&Self) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Discoverer> + IsA<glib::object::Object>> DiscovererExt for O {
    fn discover_uri(&self, uri: &str) -> Result<DiscovererInfo, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::gst_discoverer_discover_uri(self.to_glib_none().0, uri.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn discover_uri_async(&self, uri: &str) -> bool {
        unsafe {
            from_glib(ffi::gst_discoverer_discover_uri_async(self.to_glib_none().0, uri.to_glib_none().0))
        }
    }

    fn start(&self) {
        unsafe {
            ffi::gst_discoverer_start(self.to_glib_none().0);
        }
    }

    fn stop(&self) {
        unsafe {
            ffi::gst_discoverer_stop(self.to_glib_none().0);
        }
    }

    fn get_property_timeout(&self) -> u64 {
        let mut value = Value::from(&0u64);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "timeout".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_timeout(&self, timeout: u64) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "timeout".to_glib_none().0, Value::from(&timeout).to_glib_none().0);
        }
    }

    fn connect_discovered<F: Fn(&Self, &DiscovererInfo, &Error) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &DiscovererInfo, &Error) + Send + Sync + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "discovered",
                transmute(discovered_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_finished<F: Fn(&Self) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + Send + Sync + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "finished",
                transmute(finished_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_source_setup<F: Fn(&Self, &gst::Element) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &gst::Element) + Send + Sync + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "source-setup",
                transmute(source_setup_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_starting<F: Fn(&Self) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + Send + Sync + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "starting",
                transmute(starting_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_timeout_notify<F: Fn(&Self) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + Send + Sync + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::timeout",
                transmute(notify_timeout_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn discovered_trampoline<P>(this: *mut ffi::GstDiscoverer, info: *mut ffi::GstDiscovererInfo, error: *mut glib_ffi::GError, f: glib_ffi::gpointer)
where P: IsA<Discoverer> {
    callback_guard!();
    let f: &&(Fn(&P, &DiscovererInfo, &Error) + Send + Sync + 'static) = transmute(f);
    f(&Discoverer::from_glib_borrow(this).downcast_unchecked(), &from_glib_borrow(info), &from_glib_borrow(error))
}

unsafe extern "C" fn finished_trampoline<P>(this: *mut ffi::GstDiscoverer, f: glib_ffi::gpointer)
where P: IsA<Discoverer> {
    callback_guard!();
    let f: &&(Fn(&P) + Send + Sync + 'static) = transmute(f);
    f(&Discoverer::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn source_setup_trampoline<P>(this: *mut ffi::GstDiscoverer, source: *mut gst_ffi::GstElement, f: glib_ffi::gpointer)
where P: IsA<Discoverer> {
    callback_guard!();
    let f: &&(Fn(&P, &gst::Element) + Send + Sync + 'static) = transmute(f);
    f(&Discoverer::from_glib_borrow(this).downcast_unchecked(), &from_glib_borrow(source))
}

unsafe extern "C" fn starting_trampoline<P>(this: *mut ffi::GstDiscoverer, f: glib_ffi::gpointer)
where P: IsA<Discoverer> {
    callback_guard!();
    let f: &&(Fn(&P) + Send + Sync + 'static) = transmute(f);
    f(&Discoverer::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_timeout_trampoline<P>(this: *mut ffi::GstDiscoverer, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Discoverer> {
    callback_guard!();
    let f: &&(Fn(&P) + Send + Sync + 'static) = transmute(f);
    f(&Discoverer::from_glib_borrow(this).downcast_unchecked())
}
