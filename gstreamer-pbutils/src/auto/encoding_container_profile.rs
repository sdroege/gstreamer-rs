// This file was generated by gir (e912ccf) from gir-files (???)
// DO NOT EDIT

use EncodingProfile;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use gst;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct EncodingContainerProfile(Object<ffi::GstEncodingContainerProfile, ffi::GstEncodingContainerProfileClass>): EncodingProfile;

    match fn {
        get_type => || ffi::gst_encoding_container_profile_get_type(),
    }
}

impl EncodingContainerProfile {
    pub fn new<'a, 'b, 'c, P: Into<Option<&'a str>>, Q: Into<Option<&'b str>>, R: Into<Option<&'c str>>>(name: P, description: Q, format: &gst::Caps, preset: R) -> EncodingContainerProfile {
        assert_initialized_main_thread!();
        let name = name.into();
        let name = name.to_glib_none();
        let description = description.into();
        let description = description.to_glib_none();
        let preset = preset.into();
        let preset = preset.to_glib_none();
        unsafe {
            from_glib_full(ffi::gst_encoding_container_profile_new(name.0, description.0, format.to_glib_none().0, preset.0))
        }
    }
}

unsafe impl Send for EncodingContainerProfile {}
unsafe impl Sync for EncodingContainerProfile {}

pub trait EncodingContainerProfileExt {
    fn add_profile<P: IsA<EncodingProfile>>(&self, profile: &P) -> bool;

    fn contains_profile<P: IsA<EncodingProfile>>(&self, profile: &P) -> bool;

    fn get_profiles(&self) -> Vec<EncodingProfile>;
}

impl<O: IsA<EncodingContainerProfile>> EncodingContainerProfileExt for O {
    fn add_profile<P: IsA<EncodingProfile>>(&self, profile: &P) -> bool {
        unsafe {
            from_glib(ffi::gst_encoding_container_profile_add_profile(self.to_glib_none().0, profile.to_glib_full()))
        }
    }

    fn contains_profile<P: IsA<EncodingProfile>>(&self, profile: &P) -> bool {
        unsafe {
            from_glib(ffi::gst_encoding_container_profile_contains_profile(self.to_glib_none().0, profile.to_glib_none().0))
        }
    }

    fn get_profiles(&self) -> Vec<EncodingProfile> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::gst_encoding_container_profile_get_profiles(self.to_glib_none().0))
        }
    }
}
