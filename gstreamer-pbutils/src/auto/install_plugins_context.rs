// This file was generated by gir (d933f9a+) from gir-files (???)
// DO NOT EDIT

use ffi;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct InstallPluginsContext(Boxed<ffi::GstInstallPluginsContext>);

    match fn {
        copy => |ptr| ffi::gst_install_plugins_context_copy(mut_override(ptr)),
        free => |ptr| ffi::gst_install_plugins_context_free(ptr),
        get_type => || ffi::gst_install_plugins_context_get_type(),
    }
}

impl InstallPluginsContext {
    pub fn new() -> InstallPluginsContext {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gst_install_plugins_context_new())
        }
    }

    pub fn set_confirm_search(&mut self, confirm_search: bool) {
        unsafe {
            ffi::gst_install_plugins_context_set_confirm_search(self.to_glib_none_mut().0, confirm_search.to_glib());
        }
    }

    pub fn set_desktop_id(&mut self, desktop_id: &str) {
        unsafe {
            ffi::gst_install_plugins_context_set_desktop_id(self.to_glib_none_mut().0, desktop_id.to_glib_none().0);
        }
    }

    pub fn set_startup_notification_id(&mut self, startup_id: &str) {
        unsafe {
            ffi::gst_install_plugins_context_set_startup_notification_id(self.to_glib_none_mut().0, startup_id.to_glib_none().0);
        }
    }

    pub fn set_xid(&mut self, xid: u32) {
        unsafe {
            ffi::gst_install_plugins_context_set_xid(self.to_glib_none_mut().0, xid);
        }
    }
}

impl Default for InstallPluginsContext {
    fn default() -> Self {
        Self::new()
    }
}

unsafe impl Send for InstallPluginsContext {}
unsafe impl Sync for InstallPluginsContext {}
