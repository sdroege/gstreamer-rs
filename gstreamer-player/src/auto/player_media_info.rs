// This file was generated by gir (3294959) from gir-files (???)
// DO NOT EDIT

use PlayerAudioInfo;
use PlayerStreamInfo;
use PlayerSubtitleInfo;
use PlayerVideoInfo;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use gst;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct PlayerMediaInfo(Object<ffi::GstPlayerMediaInfo>);

    match fn {
        get_type => || ffi::gst_player_media_info_get_type(),
    }
}

unsafe impl Send for PlayerMediaInfo {}
unsafe impl Sync for PlayerMediaInfo {}

pub trait PlayerMediaInfoExt {
    fn get_audio_streams(&self) -> Vec<PlayerAudioInfo>;

    fn get_container_format(&self) -> Option<String>;

    fn get_duration(&self) -> gst::ClockTime;

    fn get_image_sample(&self) -> Option<gst::Sample>;

    #[cfg(feature = "v1_12")]
    fn get_number_of_audio_streams(&self) -> u32;

    #[cfg(feature = "v1_12")]
    fn get_number_of_streams(&self) -> u32;

    #[cfg(feature = "v1_12")]
    fn get_number_of_subtitle_streams(&self) -> u32;

    #[cfg(feature = "v1_12")]
    fn get_number_of_video_streams(&self) -> u32;

    fn get_stream_list(&self) -> Vec<PlayerStreamInfo>;

    fn get_subtitle_streams(&self) -> Vec<PlayerSubtitleInfo>;

    fn get_tags(&self) -> Option<gst::TagList>;

    fn get_title(&self) -> Option<String>;

    fn get_uri(&self) -> Option<String>;

    fn get_video_streams(&self) -> Vec<PlayerVideoInfo>;

    fn is_live(&self) -> bool;

    fn is_seekable(&self) -> bool;
}

impl<O: IsA<PlayerMediaInfo>> PlayerMediaInfoExt for O {
    fn get_audio_streams(&self) -> Vec<PlayerAudioInfo> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::gst_player_media_info_get_audio_streams(self.to_glib_none().0))
        }
    }

    fn get_container_format(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::gst_player_media_info_get_container_format(self.to_glib_none().0))
        }
    }

    fn get_duration(&self) -> gst::ClockTime {
        unsafe {
            ffi::gst_player_media_info_get_duration(self.to_glib_none().0)
        }
    }

    fn get_image_sample(&self) -> Option<gst::Sample> {
        unsafe {
            from_glib_none(ffi::gst_player_media_info_get_image_sample(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v1_12")]
    fn get_number_of_audio_streams(&self) -> u32 {
        unsafe {
            ffi::gst_player_media_info_get_number_of_audio_streams(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v1_12")]
    fn get_number_of_streams(&self) -> u32 {
        unsafe {
            ffi::gst_player_media_info_get_number_of_streams(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v1_12")]
    fn get_number_of_subtitle_streams(&self) -> u32 {
        unsafe {
            ffi::gst_player_media_info_get_number_of_subtitle_streams(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v1_12")]
    fn get_number_of_video_streams(&self) -> u32 {
        unsafe {
            ffi::gst_player_media_info_get_number_of_video_streams(self.to_glib_none().0)
        }
    }

    fn get_stream_list(&self) -> Vec<PlayerStreamInfo> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::gst_player_media_info_get_stream_list(self.to_glib_none().0))
        }
    }

    fn get_subtitle_streams(&self) -> Vec<PlayerSubtitleInfo> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::gst_player_media_info_get_subtitle_streams(self.to_glib_none().0))
        }
    }

    fn get_tags(&self) -> Option<gst::TagList> {
        unsafe {
            from_glib_none(ffi::gst_player_media_info_get_tags(self.to_glib_none().0))
        }
    }

    fn get_title(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::gst_player_media_info_get_title(self.to_glib_none().0))
        }
    }

    fn get_uri(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::gst_player_media_info_get_uri(self.to_glib_none().0))
        }
    }

    fn get_video_streams(&self) -> Vec<PlayerVideoInfo> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::gst_player_media_info_get_video_streams(self.to_glib_none().0))
        }
    }

    fn is_live(&self) -> bool {
        unsafe {
            from_glib(ffi::gst_player_media_info_is_live(self.to_glib_none().0))
        }
    }

    fn is_seekable(&self) -> bool {
        unsafe {
            from_glib(ffi::gst_player_media_info_is_seekable(self.to_glib_none().0))
        }
    }
}
