// This file was generated by gir (3294959) from gir-files (???)
// DO NOT EDIT

use PlayerStreamInfo;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct PlayerAudioInfo(Object<ffi::GstPlayerAudioInfo>): PlayerStreamInfo;

    match fn {
        get_type => || ffi::gst_player_audio_info_get_type(),
    }
}

unsafe impl Send for PlayerAudioInfo {}
unsafe impl Sync for PlayerAudioInfo {}

pub trait PlayerAudioInfoExt {
    fn get_bitrate(&self) -> i32;

    fn get_channels(&self) -> i32;

    fn get_language(&self) -> Option<String>;

    fn get_max_bitrate(&self) -> i32;

    fn get_sample_rate(&self) -> i32;
}

impl<O: IsA<PlayerAudioInfo>> PlayerAudioInfoExt for O {
    fn get_bitrate(&self) -> i32 {
        unsafe {
            ffi::gst_player_audio_info_get_bitrate(self.to_glib_none().0)
        }
    }

    fn get_channels(&self) -> i32 {
        unsafe {
            ffi::gst_player_audio_info_get_channels(self.to_glib_none().0)
        }
    }

    fn get_language(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::gst_player_audio_info_get_language(self.to_glib_none().0))
        }
    }

    fn get_max_bitrate(&self) -> i32 {
        unsafe {
            ffi::gst_player_audio_info_get_max_bitrate(self.to_glib_none().0)
        }
    }

    fn get_sample_rate(&self) -> i32 {
        unsafe {
            ffi::gst_player_audio_info_get_sample_rate(self.to_glib_none().0)
        }
    }
}
