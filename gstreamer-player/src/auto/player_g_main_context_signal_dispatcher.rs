// This file was generated by gir (f00d658) from gir-files (???)
// DO NOT EDIT

use PlayerSignalDispatcher;
use ffi;
use glib;
use glib::Value;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct PlayerGMainContextSignalDispatcher(Object<ffi::GstPlayerGMainContextSignalDispatcher>): PlayerSignalDispatcher;

    match fn {
        get_type => || ffi::gst_player_g_main_context_signal_dispatcher_get_type(),
    }
}

impl PlayerGMainContextSignalDispatcher {
    pub fn new<'a, P: Into<Option<&'a glib::MainContext>>>(application_context: P) -> Option<PlayerSignalDispatcher> {
        assert_initialized_main_thread!();
        let application_context = application_context.into();
        let application_context = application_context.to_glib_none();
        unsafe {
            from_glib_full(ffi::gst_player_g_main_context_signal_dispatcher_new(application_context.0))
        }
    }
}

unsafe impl Send for PlayerGMainContextSignalDispatcher {}
unsafe impl Sync for PlayerGMainContextSignalDispatcher {}

pub trait PlayerGMainContextSignalDispatcherExt {
    fn get_property_application_context(&self) -> Option<glib::MainContext>;
}

impl<O: IsA<PlayerGMainContextSignalDispatcher> + IsA<glib::object::Object>> PlayerGMainContextSignalDispatcherExt for O {
    fn get_property_application_context(&self) -> Option<glib::MainContext> {
        let mut value = Value::from(None::<&glib::MainContext>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "application-context".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }
}
