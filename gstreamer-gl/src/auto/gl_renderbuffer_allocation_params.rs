// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct GLRenderbufferAllocationParams(Boxed<ffi::GstGLRenderbufferAllocationParams>);

    match fn {
        copy => |ptr| gobject_ffi::g_boxed_copy(ffi::gst_gl_renderbuffer_allocation_params_get_type(), ptr as *mut _) as *mut ffi::GstGLRenderbufferAllocationParams,
        free => |ptr| gobject_ffi::g_boxed_free(ffi::gst_gl_renderbuffer_allocation_params_get_type(), ptr as *mut _),
        get_type => || ffi::gst_gl_renderbuffer_allocation_params_get_type(),
    }
}

impl GLRenderbufferAllocationParams {
    //pub fn new<'a, P: Into<Option<&'a /*Ignored*/gst::AllocationParams>>>(context: &GLContext, alloc_params: P, renderbuffer_format: GLFormat, width: u32, height: u32) -> GLRenderbufferAllocationParams {
    //    unsafe { TODO: call ffi::gst_gl_renderbuffer_allocation_params_new() }
    //}

    //pub fn new_wrapped<'a, 'b, P: Into<Option<&'a /*Ignored*/gst::AllocationParams>>, Q: Into<Option</*Unimplemented*/Fundamental: Pointer>>, R: Into<Option<&'b /*Ignored*/glib::DestroyNotify>>>(context: &GLContext, alloc_params: P, renderbuffer_format: GLFormat, width: u32, height: u32, gl_handle: Q, notify: R) -> GLRenderbufferAllocationParams {
    //    unsafe { TODO: call ffi::gst_gl_renderbuffer_allocation_params_new_wrapped() }
    //}
}

unsafe impl Send for GLRenderbufferAllocationParams {}
unsafe impl Sync for GLRenderbufferAllocationParams {}
