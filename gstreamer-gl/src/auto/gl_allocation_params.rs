// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct GLAllocationParams(Boxed<ffi::GstGLAllocationParams>);

    match fn {
        copy => |ptr| ffi::gst_gl_allocation_params_copy(mut_override(ptr)),
        free => |ptr| ffi::gst_gl_allocation_params_free(ptr),
        get_type => || ffi::gst_gl_allocation_params_get_type(),
    }
}

impl GLAllocationParams {
    pub fn copy_data(&mut self, dest: &mut GLAllocationParams) {
        unsafe {
            ffi::gst_gl_allocation_params_copy_data(self.to_glib_none_mut().0, dest.to_glib_none_mut().0);
        }
    }

    pub fn free_data(&mut self) {
        unsafe {
            ffi::gst_gl_allocation_params_free_data(self.to_glib_none_mut().0);
        }
    }

    //pub fn init<'a, 'b, P: Into<Option<&'a /*Ignored*/gst::AllocationParams>>, Q: Into<Option</*Unimplemented*/Fundamental: Pointer>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>, S: Into<Option<&'b /*Ignored*/glib::DestroyNotify>>>(&mut self, struct_size: usize, alloc_flags: u32, copy: /*Unknown conversion*//*Unimplemented*/GLAllocationParamsCopyFunc, free: /*Unknown conversion*//*Unimplemented*/GLAllocationParamsFreeFunc, context: &GLContext, alloc_size: usize, alloc_params: P, wrapped_data: Q, gl_handle: R, notify: S) -> bool {
    //    unsafe { TODO: call ffi::gst_gl_allocation_params_init() }
    //}
}

unsafe impl Send for GLAllocationParams {}
unsafe impl Sync for GLAllocationParams {}
