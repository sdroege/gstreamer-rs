// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Clip;
use Container;
use Extractable;
use TimelineElement;
use ffi;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct UriClip(Object<ffi::GESUriClip, ffi::GESUriClipClass>): Clip, Container, TimelineElement, Extractable;

    match fn {
        get_type => || ffi::ges_uri_clip_get_type(),
    }
}

impl UriClip {
    pub fn new(uri: &str) -> UriClip {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::ges_uri_clip_new(uri.to_glib_none().0))
        }
    }
}

pub trait UriClipExt {
    fn get_uri(&self) -> Option<String>;

    fn is_image(&self) -> bool;

    fn is_muted(&self) -> bool;

    fn set_is_image(&self, is_image: bool);

    fn set_mute(&self, mute: bool);

    fn get_property_is_image(&self) -> bool;

    fn get_property_mute(&self) -> bool;

    fn connect_property_is_image_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_mute_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_supported_formats_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<UriClip> + IsA<glib::object::Object>> UriClipExt for O {
    fn get_uri(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::ges_uri_clip_get_uri(self.to_glib_none().0))
        }
    }

    fn is_image(&self) -> bool {
        unsafe {
            from_glib(ffi::ges_uri_clip_is_image(self.to_glib_none().0))
        }
    }

    fn is_muted(&self) -> bool {
        unsafe {
            from_glib(ffi::ges_uri_clip_is_muted(self.to_glib_none().0))
        }
    }

    fn set_is_image(&self, is_image: bool) {
        unsafe {
            ffi::ges_uri_clip_set_is_image(self.to_glib_none().0, is_image.to_glib());
        }
    }

    fn set_mute(&self, mute: bool) {
        unsafe {
            ffi::ges_uri_clip_set_mute(self.to_glib_none().0, mute.to_glib());
        }
    }

    fn get_property_is_image(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "is-image".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_mute(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "mute".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn connect_property_is_image_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::is-image",
                transmute(notify_is_image_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_mute_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::mute",
                transmute(notify_mute_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_supported_formats_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::supported-formats",
                transmute(notify_supported_formats_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::uri",
                transmute(notify_uri_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_is_image_trampoline<P>(this: *mut ffi::GESUriClip, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<UriClip> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&UriClip::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_mute_trampoline<P>(this: *mut ffi::GESUriClip, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<UriClip> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&UriClip::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_supported_formats_trampoline<P>(this: *mut ffi::GESUriClip, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<UriClip> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&UriClip::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_uri_trampoline<P>(this: *mut ffi::GESUriClip, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<UriClip> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&UriClip::from_glib_borrow(this).downcast_unchecked())
}
