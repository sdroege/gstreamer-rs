// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Asset;
use Clip;
use Extractable;
use Timeline;
use TrackType;
use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use gst;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Layer(Object<ffi::GESLayer, ffi::GESLayerClass>): Extractable;

    match fn {
        get_type => || ffi::ges_layer_get_type(),
    }
}

impl Layer {
    pub fn new() -> Layer {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::ges_layer_new())
        }
    }
}

impl Default for Layer {
    fn default() -> Self {
        Self::new()
    }
}

pub trait LayerExt {
    fn add_asset<P: IsA<Asset>>(&self, asset: &P, start: gst::ClockTime, inpoint: gst::ClockTime, duration: gst::ClockTime, track_types: TrackType) -> Option<Clip>;

    fn add_clip<P: IsA<Clip>>(&self, clip: &P) -> bool;

    fn get_auto_transition(&self) -> bool;

    fn get_clips(&self) -> Vec<Clip>;

    fn get_clips_in_interval(&self, start: gst::ClockTime, end: gst::ClockTime) -> Vec<Clip>;

    fn get_duration(&self) -> gst::ClockTime;

    fn get_priority(&self) -> u32;

    fn get_timeline(&self) -> Option<Timeline>;

    fn is_empty(&self) -> bool;

    fn remove_clip<P: IsA<Clip>>(&self, clip: &P) -> bool;

    fn set_auto_transition(&self, auto_transition: bool);

    #[cfg_attr(feature = "v1_16", deprecated)]
    fn set_priority(&self, priority: u32);

    fn set_timeline(&self, timeline: &Timeline);

    fn connect_clip_added<F: Fn(&Self, &Clip) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_clip_removed<F: Fn(&Self, &Clip) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_auto_transition_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg_attr(feature = "v1_16", deprecated)]
    fn connect_property_priority_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Layer> + IsA<glib::object::Object>> LayerExt for O {
    fn add_asset<P: IsA<Asset>>(&self, asset: &P, start: gst::ClockTime, inpoint: gst::ClockTime, duration: gst::ClockTime, track_types: TrackType) -> Option<Clip> {
        unsafe {
            from_glib_none(ffi::ges_layer_add_asset(self.to_glib_none().0, asset.to_glib_none().0, start.to_glib(), inpoint.to_glib(), duration.to_glib(), track_types.to_glib()))
        }
    }

    fn add_clip<P: IsA<Clip>>(&self, clip: &P) -> bool {
        unsafe {
            from_glib(ffi::ges_layer_add_clip(self.to_glib_none().0, clip.to_glib_none().0))
        }
    }

    fn get_auto_transition(&self) -> bool {
        unsafe {
            from_glib(ffi::ges_layer_get_auto_transition(self.to_glib_none().0))
        }
    }

    fn get_clips(&self) -> Vec<Clip> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::ges_layer_get_clips(self.to_glib_none().0))
        }
    }

    fn get_clips_in_interval(&self, start: gst::ClockTime, end: gst::ClockTime) -> Vec<Clip> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::ges_layer_get_clips_in_interval(self.to_glib_none().0, start.to_glib(), end.to_glib()))
        }
    }

    fn get_duration(&self) -> gst::ClockTime {
        unsafe {
            from_glib(ffi::ges_layer_get_duration(self.to_glib_none().0))
        }
    }

    fn get_priority(&self) -> u32 {
        unsafe {
            ffi::ges_layer_get_priority(self.to_glib_none().0)
        }
    }

    fn get_timeline(&self) -> Option<Timeline> {
        unsafe {
            from_glib_none(ffi::ges_layer_get_timeline(self.to_glib_none().0))
        }
    }

    fn is_empty(&self) -> bool {
        unsafe {
            from_glib(ffi::ges_layer_is_empty(self.to_glib_none().0))
        }
    }

    fn remove_clip<P: IsA<Clip>>(&self, clip: &P) -> bool {
        unsafe {
            from_glib(ffi::ges_layer_remove_clip(self.to_glib_none().0, clip.to_glib_none().0))
        }
    }

    fn set_auto_transition(&self, auto_transition: bool) {
        unsafe {
            ffi::ges_layer_set_auto_transition(self.to_glib_none().0, auto_transition.to_glib());
        }
    }

    fn set_priority(&self, priority: u32) {
        unsafe {
            ffi::ges_layer_set_priority(self.to_glib_none().0, priority);
        }
    }

    fn set_timeline(&self, timeline: &Timeline) {
        unsafe {
            ffi::ges_layer_set_timeline(self.to_glib_none().0, timeline.to_glib_none().0);
        }
    }

    fn connect_clip_added<F: Fn(&Self, &Clip) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &Clip) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "clip-added",
                transmute(clip_added_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_clip_removed<F: Fn(&Self, &Clip) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &Clip) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "clip-removed",
                transmute(clip_removed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_auto_transition_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::auto-transition",
                transmute(notify_auto_transition_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_priority_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::priority",
                transmute(notify_priority_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn clip_added_trampoline<P>(this: *mut ffi::GESLayer, clip: *mut ffi::GESClip, f: glib_ffi::gpointer)
where P: IsA<Layer> {
    let f: &&(Fn(&P, &Clip) + 'static) = transmute(f);
    f(&Layer::from_glib_borrow(this).downcast_unchecked(), &from_glib_borrow(clip))
}

unsafe extern "C" fn clip_removed_trampoline<P>(this: *mut ffi::GESLayer, clip: *mut ffi::GESClip, f: glib_ffi::gpointer)
where P: IsA<Layer> {
    let f: &&(Fn(&P, &Clip) + 'static) = transmute(f);
    f(&Layer::from_glib_borrow(this).downcast_unchecked(), &from_glib_borrow(clip))
}

unsafe extern "C" fn notify_auto_transition_trampoline<P>(this: *mut ffi::GESLayer, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Layer> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Layer::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_priority_trampoline<P>(this: *mut ffi::GESLayer, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Layer> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Layer::from_glib_borrow(this).downcast_unchecked())
}
